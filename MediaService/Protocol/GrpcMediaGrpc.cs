// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: GrpcMedia.proto
// </auto-generated>
#pragma warning disable 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace GrpcMediaService {
  public static partial class MediaServiceToGrpc
  {
    static readonly string __ServiceName = "GrpcMediaService.MediaServiceToGrpc";

    static readonly grpc::Marshaller<global::GrpcMediaService.FormPublicStruct> __Marshaller_FormPublicStruct = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcMediaService.FormPublicStruct.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcMediaService.ModifyReply> __Marshaller_ModifyReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcMediaService.ModifyReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcMediaService.IdRequest> __Marshaller_IdRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcMediaService.IdRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcMediaService.Empty> __Marshaller_Empty = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcMediaService.Empty.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcMediaService.FormPublicList> __Marshaller_FormPublicList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcMediaService.FormPublicList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcMediaService.PaginationRequestSearch> __Marshaller_PaginationRequestSearch = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcMediaService.PaginationRequestSearch.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcMediaService.ExpressStruct> __Marshaller_ExpressStruct = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcMediaService.ExpressStruct.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcMediaService.ExpressList> __Marshaller_ExpressList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcMediaService.ExpressList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcMediaService.CatalogueBooksStruct> __Marshaller_CatalogueBooksStruct = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcMediaService.CatalogueBooksStruct.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcMediaService.InterviewStruct> __Marshaller_InterviewStruct = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcMediaService.InterviewStruct.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcMediaService.InterviewList> __Marshaller_InterviewList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcMediaService.InterviewList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcMediaService.HighlightsInfoStruct> __Marshaller_HighlightsInfoStruct = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcMediaService.HighlightsInfoStruct.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcMediaService.HighlightsInfoList> __Marshaller_HighlightsInfoList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcMediaService.HighlightsInfoList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcMediaService.HotelStruct> __Marshaller_HotelStruct = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcMediaService.HotelStruct.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcMediaService.HotelId> __Marshaller_HotelId = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcMediaService.HotelId.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcMediaService.HotelList> __Marshaller_HotelList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcMediaService.HotelList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcMediaService.HotelRoomTypeStruct> __Marshaller_HotelRoomTypeStruct = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcMediaService.HotelRoomTypeStruct.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcMediaService.HotelRoomTypeId> __Marshaller_HotelRoomTypeId = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcMediaService.HotelRoomTypeId.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcMediaService.HotelRoomTypeList> __Marshaller_HotelRoomTypeList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcMediaService.HotelRoomTypeList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcMediaService.HotelBookRecordStruct> __Marshaller_HotelBookRecordStruct = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcMediaService.HotelBookRecordStruct.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcMediaService.MemberId> __Marshaller_MemberId = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcMediaService.MemberId.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcMediaService.HotelBookRecordList> __Marshaller_HotelBookRecordList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcMediaService.HotelBookRecordList.Parser.ParseFrom);

    static readonly grpc::Method<global::GrpcMediaService.FormPublicStruct, global::GrpcMediaService.ModifyReply> __Method_createFormPublicInfo = new grpc::Method<global::GrpcMediaService.FormPublicStruct, global::GrpcMediaService.ModifyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "createFormPublicInfo",
        __Marshaller_FormPublicStruct,
        __Marshaller_ModifyReply);

    static readonly grpc::Method<global::GrpcMediaService.FormPublicStruct, global::GrpcMediaService.ModifyReply> __Method_updateFormPublicInfo = new grpc::Method<global::GrpcMediaService.FormPublicStruct, global::GrpcMediaService.ModifyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "updateFormPublicInfo",
        __Marshaller_FormPublicStruct,
        __Marshaller_ModifyReply);

    static readonly grpc::Method<global::GrpcMediaService.IdRequest, global::GrpcMediaService.ModifyReply> __Method_deleteFormPublicInfoById = new grpc::Method<global::GrpcMediaService.IdRequest, global::GrpcMediaService.ModifyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "deleteFormPublicInfoById",
        __Marshaller_IdRequest,
        __Marshaller_ModifyReply);

    static readonly grpc::Method<global::GrpcMediaService.Empty, global::GrpcMediaService.FormPublicList> __Method_getFormPublicInfoList = new grpc::Method<global::GrpcMediaService.Empty, global::GrpcMediaService.FormPublicList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "getFormPublicInfoList",
        __Marshaller_Empty,
        __Marshaller_FormPublicList);

    static readonly grpc::Method<global::GrpcMediaService.IdRequest, global::GrpcMediaService.FormPublicStruct> __Method_getFormPublicInfoById = new grpc::Method<global::GrpcMediaService.IdRequest, global::GrpcMediaService.FormPublicStruct>(
        grpc::MethodType.Unary,
        __ServiceName,
        "getFormPublicInfoById",
        __Marshaller_IdRequest,
        __Marshaller_FormPublicStruct);

    static readonly grpc::Method<global::GrpcMediaService.PaginationRequestSearch, global::GrpcMediaService.FormPublicList> __Method_getFormPublicList = new grpc::Method<global::GrpcMediaService.PaginationRequestSearch, global::GrpcMediaService.FormPublicList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "getFormPublicList",
        __Marshaller_PaginationRequestSearch,
        __Marshaller_FormPublicList);

    static readonly grpc::Method<global::GrpcMediaService.ExpressStruct, global::GrpcMediaService.ModifyReply> __Method_createExpressInfo = new grpc::Method<global::GrpcMediaService.ExpressStruct, global::GrpcMediaService.ModifyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "createExpressInfo",
        __Marshaller_ExpressStruct,
        __Marshaller_ModifyReply);

    static readonly grpc::Method<global::GrpcMediaService.ExpressStruct, global::GrpcMediaService.ModifyReply> __Method_updateExpressInfo = new grpc::Method<global::GrpcMediaService.ExpressStruct, global::GrpcMediaService.ModifyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "updateExpressInfo",
        __Marshaller_ExpressStruct,
        __Marshaller_ModifyReply);

    static readonly grpc::Method<global::GrpcMediaService.IdRequest, global::GrpcMediaService.ModifyReply> __Method_deleteExpressInfoById = new grpc::Method<global::GrpcMediaService.IdRequest, global::GrpcMediaService.ModifyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "deleteExpressInfoById",
        __Marshaller_IdRequest,
        __Marshaller_ModifyReply);

    static readonly grpc::Method<global::GrpcMediaService.IdRequest, global::GrpcMediaService.ExpressStruct> __Method_getExpressInfoById = new grpc::Method<global::GrpcMediaService.IdRequest, global::GrpcMediaService.ExpressStruct>(
        grpc::MethodType.Unary,
        __ServiceName,
        "getExpressInfoById",
        __Marshaller_IdRequest,
        __Marshaller_ExpressStruct);

    static readonly grpc::Method<global::GrpcMediaService.PaginationRequestSearch, global::GrpcMediaService.ExpressList> __Method_getExpressList = new grpc::Method<global::GrpcMediaService.PaginationRequestSearch, global::GrpcMediaService.ExpressList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "getExpressList",
        __Marshaller_PaginationRequestSearch,
        __Marshaller_ExpressList);

    static readonly grpc::Method<global::GrpcMediaService.CatalogueBooksStruct, global::GrpcMediaService.ModifyReply> __Method_createCatalogueBooksInfo = new grpc::Method<global::GrpcMediaService.CatalogueBooksStruct, global::GrpcMediaService.ModifyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "createCatalogueBooksInfo",
        __Marshaller_CatalogueBooksStruct,
        __Marshaller_ModifyReply);

    static readonly grpc::Method<global::GrpcMediaService.CatalogueBooksStruct, global::GrpcMediaService.ModifyReply> __Method_updateCatalogueBooksInfo = new grpc::Method<global::GrpcMediaService.CatalogueBooksStruct, global::GrpcMediaService.ModifyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "updateCatalogueBooksInfo",
        __Marshaller_CatalogueBooksStruct,
        __Marshaller_ModifyReply);

    static readonly grpc::Method<global::GrpcMediaService.IdRequest, global::GrpcMediaService.ModifyReply> __Method_deleteCatalogueBooksById = new grpc::Method<global::GrpcMediaService.IdRequest, global::GrpcMediaService.ModifyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "deleteCatalogueBooksById",
        __Marshaller_IdRequest,
        __Marshaller_ModifyReply);

    static readonly grpc::Method<global::GrpcMediaService.InterviewStruct, global::GrpcMediaService.ModifyReply> __Method_createInterviewInfo = new grpc::Method<global::GrpcMediaService.InterviewStruct, global::GrpcMediaService.ModifyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "createInterviewInfo",
        __Marshaller_InterviewStruct,
        __Marshaller_ModifyReply);

    static readonly grpc::Method<global::GrpcMediaService.InterviewStruct, global::GrpcMediaService.ModifyReply> __Method_updateInterviewInfo = new grpc::Method<global::GrpcMediaService.InterviewStruct, global::GrpcMediaService.ModifyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "updateInterviewInfo",
        __Marshaller_InterviewStruct,
        __Marshaller_ModifyReply);

    static readonly grpc::Method<global::GrpcMediaService.IdRequest, global::GrpcMediaService.ModifyReply> __Method_deleteInterviewById = new grpc::Method<global::GrpcMediaService.IdRequest, global::GrpcMediaService.ModifyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "deleteInterviewById",
        __Marshaller_IdRequest,
        __Marshaller_ModifyReply);

    static readonly grpc::Method<global::GrpcMediaService.IdRequest, global::GrpcMediaService.InterviewStruct> __Method_getInterviewInfoById = new grpc::Method<global::GrpcMediaService.IdRequest, global::GrpcMediaService.InterviewStruct>(
        grpc::MethodType.Unary,
        __ServiceName,
        "getInterviewInfoById",
        __Marshaller_IdRequest,
        __Marshaller_InterviewStruct);

    static readonly grpc::Method<global::GrpcMediaService.PaginationRequestSearch, global::GrpcMediaService.InterviewList> __Method_getInterviewList = new grpc::Method<global::GrpcMediaService.PaginationRequestSearch, global::GrpcMediaService.InterviewList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "getInterviewList",
        __Marshaller_PaginationRequestSearch,
        __Marshaller_InterviewList);

    static readonly grpc::Method<global::GrpcMediaService.HighlightsInfoStruct, global::GrpcMediaService.ModifyReply> __Method_createHighlightsInfo = new grpc::Method<global::GrpcMediaService.HighlightsInfoStruct, global::GrpcMediaService.ModifyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "createHighlightsInfo",
        __Marshaller_HighlightsInfoStruct,
        __Marshaller_ModifyReply);

    static readonly grpc::Method<global::GrpcMediaService.HighlightsInfoStruct, global::GrpcMediaService.ModifyReply> __Method_updateHighlightsInfo = new grpc::Method<global::GrpcMediaService.HighlightsInfoStruct, global::GrpcMediaService.ModifyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "updateHighlightsInfo",
        __Marshaller_HighlightsInfoStruct,
        __Marshaller_ModifyReply);

    static readonly grpc::Method<global::GrpcMediaService.IdRequest, global::GrpcMediaService.ModifyReply> __Method_deleteHighlightsInfoById = new grpc::Method<global::GrpcMediaService.IdRequest, global::GrpcMediaService.ModifyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "deleteHighlightsInfoById",
        __Marshaller_IdRequest,
        __Marshaller_ModifyReply);

    static readonly grpc::Method<global::GrpcMediaService.IdRequest, global::GrpcMediaService.HighlightsInfoStruct> __Method_getHighlightsInfoById = new grpc::Method<global::GrpcMediaService.IdRequest, global::GrpcMediaService.HighlightsInfoStruct>(
        grpc::MethodType.Unary,
        __ServiceName,
        "getHighlightsInfoById",
        __Marshaller_IdRequest,
        __Marshaller_HighlightsInfoStruct);

    static readonly grpc::Method<global::GrpcMediaService.PaginationRequestSearch, global::GrpcMediaService.HighlightsInfoList> __Method_getHighlightsInfoList = new grpc::Method<global::GrpcMediaService.PaginationRequestSearch, global::GrpcMediaService.HighlightsInfoList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "getHighlightsInfoList",
        __Marshaller_PaginationRequestSearch,
        __Marshaller_HighlightsInfoList);

    static readonly grpc::Method<global::GrpcMediaService.HotelStruct, global::GrpcMediaService.ModifyReply> __Method_createHotelInfo = new grpc::Method<global::GrpcMediaService.HotelStruct, global::GrpcMediaService.ModifyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "createHotelInfo",
        __Marshaller_HotelStruct,
        __Marshaller_ModifyReply);

    static readonly grpc::Method<global::GrpcMediaService.HotelStruct, global::GrpcMediaService.ModifyReply> __Method_updateHotelInfo = new grpc::Method<global::GrpcMediaService.HotelStruct, global::GrpcMediaService.ModifyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "updateHotelInfo",
        __Marshaller_HotelStruct,
        __Marshaller_ModifyReply);

    static readonly grpc::Method<global::GrpcMediaService.HotelId, global::GrpcMediaService.ModifyReply> __Method_deleteHotelInfoById = new grpc::Method<global::GrpcMediaService.HotelId, global::GrpcMediaService.ModifyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "deleteHotelInfoById",
        __Marshaller_HotelId,
        __Marshaller_ModifyReply);

    static readonly grpc::Method<global::GrpcMediaService.HotelId, global::GrpcMediaService.HotelStruct> __Method_getHotelById = new grpc::Method<global::GrpcMediaService.HotelId, global::GrpcMediaService.HotelStruct>(
        grpc::MethodType.Unary,
        __ServiceName,
        "getHotelById",
        __Marshaller_HotelId,
        __Marshaller_HotelStruct);

    static readonly grpc::Method<global::GrpcMediaService.Empty, global::GrpcMediaService.HotelList> __Method_GetHotelList = new grpc::Method<global::GrpcMediaService.Empty, global::GrpcMediaService.HotelList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetHotelList",
        __Marshaller_Empty,
        __Marshaller_HotelList);

    static readonly grpc::Method<global::GrpcMediaService.HotelRoomTypeStruct, global::GrpcMediaService.ModifyReply> __Method_createHotelRoomTypeInfo = new grpc::Method<global::GrpcMediaService.HotelRoomTypeStruct, global::GrpcMediaService.ModifyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "createHotelRoomTypeInfo",
        __Marshaller_HotelRoomTypeStruct,
        __Marshaller_ModifyReply);

    static readonly grpc::Method<global::GrpcMediaService.HotelRoomTypeStruct, global::GrpcMediaService.ModifyReply> __Method_updateHotelRoomTypeInfo = new grpc::Method<global::GrpcMediaService.HotelRoomTypeStruct, global::GrpcMediaService.ModifyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "updateHotelRoomTypeInfo",
        __Marshaller_HotelRoomTypeStruct,
        __Marshaller_ModifyReply);

    static readonly grpc::Method<global::GrpcMediaService.HotelRoomTypeId, global::GrpcMediaService.ModifyReply> __Method_deleteHotelRoomTypeById = new grpc::Method<global::GrpcMediaService.HotelRoomTypeId, global::GrpcMediaService.ModifyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "deleteHotelRoomTypeById",
        __Marshaller_HotelRoomTypeId,
        __Marshaller_ModifyReply);

    static readonly grpc::Method<global::GrpcMediaService.HotelRoomTypeId, global::GrpcMediaService.HotelRoomTypeStruct> __Method_getHotelRoomTypeInfoById = new grpc::Method<global::GrpcMediaService.HotelRoomTypeId, global::GrpcMediaService.HotelRoomTypeStruct>(
        grpc::MethodType.Unary,
        __ServiceName,
        "getHotelRoomTypeInfoById",
        __Marshaller_HotelRoomTypeId,
        __Marshaller_HotelRoomTypeStruct);

    static readonly grpc::Method<global::GrpcMediaService.HotelId, global::GrpcMediaService.HotelRoomTypeList> __Method_getHolteRoomTypeListByHotelId = new grpc::Method<global::GrpcMediaService.HotelId, global::GrpcMediaService.HotelRoomTypeList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "getHolteRoomTypeListByHotelId",
        __Marshaller_HotelId,
        __Marshaller_HotelRoomTypeList);

    static readonly grpc::Method<global::GrpcMediaService.HotelBookRecordStruct, global::GrpcMediaService.ModifyReply> __Method_createHotelBookRecordInfo = new grpc::Method<global::GrpcMediaService.HotelBookRecordStruct, global::GrpcMediaService.ModifyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "createHotelBookRecordInfo",
        __Marshaller_HotelBookRecordStruct,
        __Marshaller_ModifyReply);

    static readonly grpc::Method<global::GrpcMediaService.HotelBookRecordStruct, global::GrpcMediaService.ModifyReply> __Method_updateHotelBookRecordInfo = new grpc::Method<global::GrpcMediaService.HotelBookRecordStruct, global::GrpcMediaService.ModifyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "updateHotelBookRecordInfo",
        __Marshaller_HotelBookRecordStruct,
        __Marshaller_ModifyReply);

    static readonly grpc::Method<global::GrpcMediaService.IdRequest, global::GrpcMediaService.ModifyReply> __Method_deleteHotelBookRecordInfoById = new grpc::Method<global::GrpcMediaService.IdRequest, global::GrpcMediaService.ModifyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "deleteHotelBookRecordInfoById",
        __Marshaller_IdRequest,
        __Marshaller_ModifyReply);

    static readonly grpc::Method<global::GrpcMediaService.MemberId, global::GrpcMediaService.HotelBookRecordList> __Method_getHotelBookRecordByMemberId = new grpc::Method<global::GrpcMediaService.MemberId, global::GrpcMediaService.HotelBookRecordList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "getHotelBookRecordByMemberId",
        __Marshaller_MemberId,
        __Marshaller_HotelBookRecordList);

    static readonly grpc::Method<global::GrpcMediaService.IdRequest, global::GrpcMediaService.ModifyReply> __Method_cancelHotelBookRecordById = new grpc::Method<global::GrpcMediaService.IdRequest, global::GrpcMediaService.ModifyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "cancelHotelBookRecordById",
        __Marshaller_IdRequest,
        __Marshaller_ModifyReply);

    static readonly grpc::Method<global::GrpcMediaService.IdRequest, global::GrpcMediaService.HotelBookRecordStruct> __Method_getHotelBookRecordById = new grpc::Method<global::GrpcMediaService.IdRequest, global::GrpcMediaService.HotelBookRecordStruct>(
        grpc::MethodType.Unary,
        __ServiceName,
        "getHotelBookRecordById",
        __Marshaller_IdRequest,
        __Marshaller_HotelBookRecordStruct);

    static readonly grpc::Method<global::GrpcMediaService.PaginationRequestSearch, global::GrpcMediaService.HotelBookRecordList> __Method_getHotelBookRecordList = new grpc::Method<global::GrpcMediaService.PaginationRequestSearch, global::GrpcMediaService.HotelBookRecordList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "getHotelBookRecordList",
        __Marshaller_PaginationRequestSearch,
        __Marshaller_HotelBookRecordList);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::GrpcMediaService.GrpcMediaReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of MediaServiceToGrpc</summary>
    public abstract partial class MediaServiceToGrpcBase
    {
      /// <summary>
      ///创建会刊信息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcMediaService.ModifyReply> createFormPublicInfo(global::GrpcMediaService.FormPublicStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///修改会刊信息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcMediaService.ModifyReply> updateFormPublicInfo(global::GrpcMediaService.FormPublicStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据Id删除会刊信息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcMediaService.ModifyReply> deleteFormPublicInfoById(global::GrpcMediaService.IdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///获得会刊信息列表
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcMediaService.FormPublicList> getFormPublicInfoList(global::GrpcMediaService.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据Id获得会刊信息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcMediaService.FormPublicStruct> getFormPublicInfoById(global::GrpcMediaService.IdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据条件查询会刊信息列表(带分页)
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcMediaService.FormPublicList> getFormPublicList(global::GrpcMediaService.PaginationRequestSearch request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///创建快递单记录
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcMediaService.ModifyReply> createExpressInfo(global::GrpcMediaService.ExpressStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///修改快递单记录
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcMediaService.ModifyReply> updateExpressInfo(global::GrpcMediaService.ExpressStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据Id删除快递单记录
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcMediaService.ModifyReply> deleteExpressInfoById(global::GrpcMediaService.IdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据Id获得快递单信息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcMediaService.ExpressStruct> getExpressInfoById(global::GrpcMediaService.IdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据条件查询快递单信息列表(带分页)
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcMediaService.ExpressList> getExpressList(global::GrpcMediaService.PaginationRequestSearch request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///创建会刊订购信息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcMediaService.ModifyReply> createCatalogueBooksInfo(global::GrpcMediaService.CatalogueBooksStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///修改会刊订购信息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcMediaService.ModifyReply> updateCatalogueBooksInfo(global::GrpcMediaService.CatalogueBooksStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据Id删除会刊订购信息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcMediaService.ModifyReply> deleteCatalogueBooksById(global::GrpcMediaService.IdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///创建专题采访信息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcMediaService.ModifyReply> createInterviewInfo(global::GrpcMediaService.InterviewStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///修改专题采访信息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcMediaService.ModifyReply> updateInterviewInfo(global::GrpcMediaService.InterviewStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据Id删除专题采访信息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcMediaService.ModifyReply> deleteInterviewById(global::GrpcMediaService.IdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据Id获得专题采访信息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcMediaService.InterviewStruct> getInterviewInfoById(global::GrpcMediaService.IdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据条件查询专题采访信息列表(带分页)
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcMediaService.InterviewList> getInterviewList(global::GrpcMediaService.PaginationRequestSearch request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///创建十大亮点信息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcMediaService.ModifyReply> createHighlightsInfo(global::GrpcMediaService.HighlightsInfoStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///修改十大亮点信息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcMediaService.ModifyReply> updateHighlightsInfo(global::GrpcMediaService.HighlightsInfoStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据Id删除十大亮点信息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcMediaService.ModifyReply> deleteHighlightsInfoById(global::GrpcMediaService.IdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据Id获得十大亮点信息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcMediaService.HighlightsInfoStruct> getHighlightsInfoById(global::GrpcMediaService.IdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据条件查询十大亮点信息列表(带分页)
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcMediaService.HighlightsInfoList> getHighlightsInfoList(global::GrpcMediaService.PaginationRequestSearch request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///========================酒店=========================
      ///创建酒店信息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcMediaService.ModifyReply> createHotelInfo(global::GrpcMediaService.HotelStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///修改酒店信息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcMediaService.ModifyReply> updateHotelInfo(global::GrpcMediaService.HotelStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据HotelId删除酒店信息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcMediaService.ModifyReply> deleteHotelInfoById(global::GrpcMediaService.HotelId request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据HotelId获得酒店信息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcMediaService.HotelStruct> getHotelById(global::GrpcMediaService.HotelId request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///获得酒店信息列表
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcMediaService.HotelList> GetHotelList(global::GrpcMediaService.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///================酒店房间类型=========================
      ///创建酒店房间类型
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcMediaService.ModifyReply> createHotelRoomTypeInfo(global::GrpcMediaService.HotelRoomTypeStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///修改酒店房间类型信息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcMediaService.ModifyReply> updateHotelRoomTypeInfo(global::GrpcMediaService.HotelRoomTypeStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据HptelRoomTypeId删除酒店房间类型
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcMediaService.ModifyReply> deleteHotelRoomTypeById(global::GrpcMediaService.HotelRoomTypeId request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据HotelRoomTypeId获得酒店房间类型信息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcMediaService.HotelRoomTypeStruct> getHotelRoomTypeInfoById(global::GrpcMediaService.HotelRoomTypeId request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据HotelId获得酒店房间集合
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcMediaService.HotelRoomTypeList> getHolteRoomTypeListByHotelId(global::GrpcMediaService.HotelId request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///创建酒店预订信息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcMediaService.ModifyReply> createHotelBookRecordInfo(global::GrpcMediaService.HotelBookRecordStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///修改酒店预订信息
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcMediaService.ModifyReply> updateHotelBookRecordInfo(global::GrpcMediaService.HotelBookRecordStruct request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据Id删除酒店预订记录
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcMediaService.ModifyReply> deleteHotelBookRecordInfoById(global::GrpcMediaService.IdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据MemberId获得酒店预订记录
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcMediaService.HotelBookRecordList> getHotelBookRecordByMemberId(global::GrpcMediaService.MemberId request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据Id取消酒店预订
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcMediaService.ModifyReply> cancelHotelBookRecordById(global::GrpcMediaService.IdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据Id获得酒店预订记录
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcMediaService.HotelBookRecordStruct> getHotelBookRecordById(global::GrpcMediaService.IdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///根据条件查询酒店预订记录列表(带分页)
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcMediaService.HotelBookRecordList> getHotelBookRecordList(global::GrpcMediaService.PaginationRequestSearch request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for MediaServiceToGrpc</summary>
    public partial class MediaServiceToGrpcClient : grpc::ClientBase<MediaServiceToGrpcClient>
    {
      /// <summary>Creates a new client for MediaServiceToGrpc</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public MediaServiceToGrpcClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for MediaServiceToGrpc that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public MediaServiceToGrpcClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected MediaServiceToGrpcClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected MediaServiceToGrpcClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      ///创建会刊信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMediaService.ModifyReply createFormPublicInfo(global::GrpcMediaService.FormPublicStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return createFormPublicInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///创建会刊信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMediaService.ModifyReply createFormPublicInfo(global::GrpcMediaService.FormPublicStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_createFormPublicInfo, null, options, request);
      }
      /// <summary>
      ///创建会刊信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMediaService.ModifyReply> createFormPublicInfoAsync(global::GrpcMediaService.FormPublicStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return createFormPublicInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///创建会刊信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMediaService.ModifyReply> createFormPublicInfoAsync(global::GrpcMediaService.FormPublicStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_createFormPublicInfo, null, options, request);
      }
      /// <summary>
      ///修改会刊信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMediaService.ModifyReply updateFormPublicInfo(global::GrpcMediaService.FormPublicStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return updateFormPublicInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///修改会刊信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMediaService.ModifyReply updateFormPublicInfo(global::GrpcMediaService.FormPublicStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_updateFormPublicInfo, null, options, request);
      }
      /// <summary>
      ///修改会刊信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMediaService.ModifyReply> updateFormPublicInfoAsync(global::GrpcMediaService.FormPublicStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return updateFormPublicInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///修改会刊信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMediaService.ModifyReply> updateFormPublicInfoAsync(global::GrpcMediaService.FormPublicStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_updateFormPublicInfo, null, options, request);
      }
      /// <summary>
      ///根据Id删除会刊信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMediaService.ModifyReply deleteFormPublicInfoById(global::GrpcMediaService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return deleteFormPublicInfoById(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据Id删除会刊信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMediaService.ModifyReply deleteFormPublicInfoById(global::GrpcMediaService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_deleteFormPublicInfoById, null, options, request);
      }
      /// <summary>
      ///根据Id删除会刊信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMediaService.ModifyReply> deleteFormPublicInfoByIdAsync(global::GrpcMediaService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return deleteFormPublicInfoByIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据Id删除会刊信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMediaService.ModifyReply> deleteFormPublicInfoByIdAsync(global::GrpcMediaService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_deleteFormPublicInfoById, null, options, request);
      }
      /// <summary>
      ///获得会刊信息列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMediaService.FormPublicList getFormPublicInfoList(global::GrpcMediaService.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getFormPublicInfoList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获得会刊信息列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMediaService.FormPublicList getFormPublicInfoList(global::GrpcMediaService.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_getFormPublicInfoList, null, options, request);
      }
      /// <summary>
      ///获得会刊信息列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMediaService.FormPublicList> getFormPublicInfoListAsync(global::GrpcMediaService.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getFormPublicInfoListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获得会刊信息列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMediaService.FormPublicList> getFormPublicInfoListAsync(global::GrpcMediaService.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_getFormPublicInfoList, null, options, request);
      }
      /// <summary>
      ///根据Id获得会刊信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMediaService.FormPublicStruct getFormPublicInfoById(global::GrpcMediaService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getFormPublicInfoById(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据Id获得会刊信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMediaService.FormPublicStruct getFormPublicInfoById(global::GrpcMediaService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_getFormPublicInfoById, null, options, request);
      }
      /// <summary>
      ///根据Id获得会刊信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMediaService.FormPublicStruct> getFormPublicInfoByIdAsync(global::GrpcMediaService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getFormPublicInfoByIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据Id获得会刊信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMediaService.FormPublicStruct> getFormPublicInfoByIdAsync(global::GrpcMediaService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_getFormPublicInfoById, null, options, request);
      }
      /// <summary>
      ///根据条件查询会刊信息列表(带分页)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMediaService.FormPublicList getFormPublicList(global::GrpcMediaService.PaginationRequestSearch request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getFormPublicList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据条件查询会刊信息列表(带分页)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMediaService.FormPublicList getFormPublicList(global::GrpcMediaService.PaginationRequestSearch request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_getFormPublicList, null, options, request);
      }
      /// <summary>
      ///根据条件查询会刊信息列表(带分页)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMediaService.FormPublicList> getFormPublicListAsync(global::GrpcMediaService.PaginationRequestSearch request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getFormPublicListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据条件查询会刊信息列表(带分页)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMediaService.FormPublicList> getFormPublicListAsync(global::GrpcMediaService.PaginationRequestSearch request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_getFormPublicList, null, options, request);
      }
      /// <summary>
      ///创建快递单记录
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMediaService.ModifyReply createExpressInfo(global::GrpcMediaService.ExpressStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return createExpressInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///创建快递单记录
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMediaService.ModifyReply createExpressInfo(global::GrpcMediaService.ExpressStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_createExpressInfo, null, options, request);
      }
      /// <summary>
      ///创建快递单记录
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMediaService.ModifyReply> createExpressInfoAsync(global::GrpcMediaService.ExpressStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return createExpressInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///创建快递单记录
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMediaService.ModifyReply> createExpressInfoAsync(global::GrpcMediaService.ExpressStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_createExpressInfo, null, options, request);
      }
      /// <summary>
      ///修改快递单记录
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMediaService.ModifyReply updateExpressInfo(global::GrpcMediaService.ExpressStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return updateExpressInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///修改快递单记录
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMediaService.ModifyReply updateExpressInfo(global::GrpcMediaService.ExpressStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_updateExpressInfo, null, options, request);
      }
      /// <summary>
      ///修改快递单记录
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMediaService.ModifyReply> updateExpressInfoAsync(global::GrpcMediaService.ExpressStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return updateExpressInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///修改快递单记录
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMediaService.ModifyReply> updateExpressInfoAsync(global::GrpcMediaService.ExpressStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_updateExpressInfo, null, options, request);
      }
      /// <summary>
      ///根据Id删除快递单记录
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMediaService.ModifyReply deleteExpressInfoById(global::GrpcMediaService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return deleteExpressInfoById(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据Id删除快递单记录
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMediaService.ModifyReply deleteExpressInfoById(global::GrpcMediaService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_deleteExpressInfoById, null, options, request);
      }
      /// <summary>
      ///根据Id删除快递单记录
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMediaService.ModifyReply> deleteExpressInfoByIdAsync(global::GrpcMediaService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return deleteExpressInfoByIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据Id删除快递单记录
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMediaService.ModifyReply> deleteExpressInfoByIdAsync(global::GrpcMediaService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_deleteExpressInfoById, null, options, request);
      }
      /// <summary>
      ///根据Id获得快递单信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMediaService.ExpressStruct getExpressInfoById(global::GrpcMediaService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getExpressInfoById(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据Id获得快递单信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMediaService.ExpressStruct getExpressInfoById(global::GrpcMediaService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_getExpressInfoById, null, options, request);
      }
      /// <summary>
      ///根据Id获得快递单信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMediaService.ExpressStruct> getExpressInfoByIdAsync(global::GrpcMediaService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getExpressInfoByIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据Id获得快递单信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMediaService.ExpressStruct> getExpressInfoByIdAsync(global::GrpcMediaService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_getExpressInfoById, null, options, request);
      }
      /// <summary>
      ///根据条件查询快递单信息列表(带分页)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMediaService.ExpressList getExpressList(global::GrpcMediaService.PaginationRequestSearch request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getExpressList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据条件查询快递单信息列表(带分页)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMediaService.ExpressList getExpressList(global::GrpcMediaService.PaginationRequestSearch request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_getExpressList, null, options, request);
      }
      /// <summary>
      ///根据条件查询快递单信息列表(带分页)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMediaService.ExpressList> getExpressListAsync(global::GrpcMediaService.PaginationRequestSearch request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getExpressListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据条件查询快递单信息列表(带分页)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMediaService.ExpressList> getExpressListAsync(global::GrpcMediaService.PaginationRequestSearch request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_getExpressList, null, options, request);
      }
      /// <summary>
      ///创建会刊订购信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMediaService.ModifyReply createCatalogueBooksInfo(global::GrpcMediaService.CatalogueBooksStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return createCatalogueBooksInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///创建会刊订购信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMediaService.ModifyReply createCatalogueBooksInfo(global::GrpcMediaService.CatalogueBooksStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_createCatalogueBooksInfo, null, options, request);
      }
      /// <summary>
      ///创建会刊订购信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMediaService.ModifyReply> createCatalogueBooksInfoAsync(global::GrpcMediaService.CatalogueBooksStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return createCatalogueBooksInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///创建会刊订购信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMediaService.ModifyReply> createCatalogueBooksInfoAsync(global::GrpcMediaService.CatalogueBooksStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_createCatalogueBooksInfo, null, options, request);
      }
      /// <summary>
      ///修改会刊订购信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMediaService.ModifyReply updateCatalogueBooksInfo(global::GrpcMediaService.CatalogueBooksStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return updateCatalogueBooksInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///修改会刊订购信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMediaService.ModifyReply updateCatalogueBooksInfo(global::GrpcMediaService.CatalogueBooksStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_updateCatalogueBooksInfo, null, options, request);
      }
      /// <summary>
      ///修改会刊订购信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMediaService.ModifyReply> updateCatalogueBooksInfoAsync(global::GrpcMediaService.CatalogueBooksStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return updateCatalogueBooksInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///修改会刊订购信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMediaService.ModifyReply> updateCatalogueBooksInfoAsync(global::GrpcMediaService.CatalogueBooksStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_updateCatalogueBooksInfo, null, options, request);
      }
      /// <summary>
      ///根据Id删除会刊订购信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMediaService.ModifyReply deleteCatalogueBooksById(global::GrpcMediaService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return deleteCatalogueBooksById(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据Id删除会刊订购信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMediaService.ModifyReply deleteCatalogueBooksById(global::GrpcMediaService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_deleteCatalogueBooksById, null, options, request);
      }
      /// <summary>
      ///根据Id删除会刊订购信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMediaService.ModifyReply> deleteCatalogueBooksByIdAsync(global::GrpcMediaService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return deleteCatalogueBooksByIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据Id删除会刊订购信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMediaService.ModifyReply> deleteCatalogueBooksByIdAsync(global::GrpcMediaService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_deleteCatalogueBooksById, null, options, request);
      }
      /// <summary>
      ///创建专题采访信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMediaService.ModifyReply createInterviewInfo(global::GrpcMediaService.InterviewStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return createInterviewInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///创建专题采访信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMediaService.ModifyReply createInterviewInfo(global::GrpcMediaService.InterviewStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_createInterviewInfo, null, options, request);
      }
      /// <summary>
      ///创建专题采访信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMediaService.ModifyReply> createInterviewInfoAsync(global::GrpcMediaService.InterviewStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return createInterviewInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///创建专题采访信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMediaService.ModifyReply> createInterviewInfoAsync(global::GrpcMediaService.InterviewStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_createInterviewInfo, null, options, request);
      }
      /// <summary>
      ///修改专题采访信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMediaService.ModifyReply updateInterviewInfo(global::GrpcMediaService.InterviewStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return updateInterviewInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///修改专题采访信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMediaService.ModifyReply updateInterviewInfo(global::GrpcMediaService.InterviewStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_updateInterviewInfo, null, options, request);
      }
      /// <summary>
      ///修改专题采访信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMediaService.ModifyReply> updateInterviewInfoAsync(global::GrpcMediaService.InterviewStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return updateInterviewInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///修改专题采访信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMediaService.ModifyReply> updateInterviewInfoAsync(global::GrpcMediaService.InterviewStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_updateInterviewInfo, null, options, request);
      }
      /// <summary>
      ///根据Id删除专题采访信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMediaService.ModifyReply deleteInterviewById(global::GrpcMediaService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return deleteInterviewById(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据Id删除专题采访信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMediaService.ModifyReply deleteInterviewById(global::GrpcMediaService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_deleteInterviewById, null, options, request);
      }
      /// <summary>
      ///根据Id删除专题采访信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMediaService.ModifyReply> deleteInterviewByIdAsync(global::GrpcMediaService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return deleteInterviewByIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据Id删除专题采访信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMediaService.ModifyReply> deleteInterviewByIdAsync(global::GrpcMediaService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_deleteInterviewById, null, options, request);
      }
      /// <summary>
      ///根据Id获得专题采访信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMediaService.InterviewStruct getInterviewInfoById(global::GrpcMediaService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getInterviewInfoById(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据Id获得专题采访信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMediaService.InterviewStruct getInterviewInfoById(global::GrpcMediaService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_getInterviewInfoById, null, options, request);
      }
      /// <summary>
      ///根据Id获得专题采访信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMediaService.InterviewStruct> getInterviewInfoByIdAsync(global::GrpcMediaService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getInterviewInfoByIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据Id获得专题采访信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMediaService.InterviewStruct> getInterviewInfoByIdAsync(global::GrpcMediaService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_getInterviewInfoById, null, options, request);
      }
      /// <summary>
      ///根据条件查询专题采访信息列表(带分页)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMediaService.InterviewList getInterviewList(global::GrpcMediaService.PaginationRequestSearch request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getInterviewList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据条件查询专题采访信息列表(带分页)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMediaService.InterviewList getInterviewList(global::GrpcMediaService.PaginationRequestSearch request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_getInterviewList, null, options, request);
      }
      /// <summary>
      ///根据条件查询专题采访信息列表(带分页)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMediaService.InterviewList> getInterviewListAsync(global::GrpcMediaService.PaginationRequestSearch request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getInterviewListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据条件查询专题采访信息列表(带分页)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMediaService.InterviewList> getInterviewListAsync(global::GrpcMediaService.PaginationRequestSearch request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_getInterviewList, null, options, request);
      }
      /// <summary>
      ///创建十大亮点信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMediaService.ModifyReply createHighlightsInfo(global::GrpcMediaService.HighlightsInfoStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return createHighlightsInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///创建十大亮点信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMediaService.ModifyReply createHighlightsInfo(global::GrpcMediaService.HighlightsInfoStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_createHighlightsInfo, null, options, request);
      }
      /// <summary>
      ///创建十大亮点信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMediaService.ModifyReply> createHighlightsInfoAsync(global::GrpcMediaService.HighlightsInfoStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return createHighlightsInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///创建十大亮点信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMediaService.ModifyReply> createHighlightsInfoAsync(global::GrpcMediaService.HighlightsInfoStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_createHighlightsInfo, null, options, request);
      }
      /// <summary>
      ///修改十大亮点信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMediaService.ModifyReply updateHighlightsInfo(global::GrpcMediaService.HighlightsInfoStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return updateHighlightsInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///修改十大亮点信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMediaService.ModifyReply updateHighlightsInfo(global::GrpcMediaService.HighlightsInfoStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_updateHighlightsInfo, null, options, request);
      }
      /// <summary>
      ///修改十大亮点信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMediaService.ModifyReply> updateHighlightsInfoAsync(global::GrpcMediaService.HighlightsInfoStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return updateHighlightsInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///修改十大亮点信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMediaService.ModifyReply> updateHighlightsInfoAsync(global::GrpcMediaService.HighlightsInfoStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_updateHighlightsInfo, null, options, request);
      }
      /// <summary>
      ///根据Id删除十大亮点信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMediaService.ModifyReply deleteHighlightsInfoById(global::GrpcMediaService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return deleteHighlightsInfoById(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据Id删除十大亮点信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMediaService.ModifyReply deleteHighlightsInfoById(global::GrpcMediaService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_deleteHighlightsInfoById, null, options, request);
      }
      /// <summary>
      ///根据Id删除十大亮点信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMediaService.ModifyReply> deleteHighlightsInfoByIdAsync(global::GrpcMediaService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return deleteHighlightsInfoByIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据Id删除十大亮点信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMediaService.ModifyReply> deleteHighlightsInfoByIdAsync(global::GrpcMediaService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_deleteHighlightsInfoById, null, options, request);
      }
      /// <summary>
      ///根据Id获得十大亮点信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMediaService.HighlightsInfoStruct getHighlightsInfoById(global::GrpcMediaService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getHighlightsInfoById(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据Id获得十大亮点信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMediaService.HighlightsInfoStruct getHighlightsInfoById(global::GrpcMediaService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_getHighlightsInfoById, null, options, request);
      }
      /// <summary>
      ///根据Id获得十大亮点信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMediaService.HighlightsInfoStruct> getHighlightsInfoByIdAsync(global::GrpcMediaService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getHighlightsInfoByIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据Id获得十大亮点信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMediaService.HighlightsInfoStruct> getHighlightsInfoByIdAsync(global::GrpcMediaService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_getHighlightsInfoById, null, options, request);
      }
      /// <summary>
      ///根据条件查询十大亮点信息列表(带分页)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMediaService.HighlightsInfoList getHighlightsInfoList(global::GrpcMediaService.PaginationRequestSearch request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getHighlightsInfoList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据条件查询十大亮点信息列表(带分页)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMediaService.HighlightsInfoList getHighlightsInfoList(global::GrpcMediaService.PaginationRequestSearch request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_getHighlightsInfoList, null, options, request);
      }
      /// <summary>
      ///根据条件查询十大亮点信息列表(带分页)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMediaService.HighlightsInfoList> getHighlightsInfoListAsync(global::GrpcMediaService.PaginationRequestSearch request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getHighlightsInfoListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据条件查询十大亮点信息列表(带分页)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMediaService.HighlightsInfoList> getHighlightsInfoListAsync(global::GrpcMediaService.PaginationRequestSearch request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_getHighlightsInfoList, null, options, request);
      }
      /// <summary>
      ///========================酒店=========================
      ///创建酒店信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMediaService.ModifyReply createHotelInfo(global::GrpcMediaService.HotelStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return createHotelInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///========================酒店=========================
      ///创建酒店信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMediaService.ModifyReply createHotelInfo(global::GrpcMediaService.HotelStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_createHotelInfo, null, options, request);
      }
      /// <summary>
      ///========================酒店=========================
      ///创建酒店信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMediaService.ModifyReply> createHotelInfoAsync(global::GrpcMediaService.HotelStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return createHotelInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///========================酒店=========================
      ///创建酒店信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMediaService.ModifyReply> createHotelInfoAsync(global::GrpcMediaService.HotelStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_createHotelInfo, null, options, request);
      }
      /// <summary>
      ///修改酒店信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMediaService.ModifyReply updateHotelInfo(global::GrpcMediaService.HotelStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return updateHotelInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///修改酒店信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMediaService.ModifyReply updateHotelInfo(global::GrpcMediaService.HotelStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_updateHotelInfo, null, options, request);
      }
      /// <summary>
      ///修改酒店信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMediaService.ModifyReply> updateHotelInfoAsync(global::GrpcMediaService.HotelStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return updateHotelInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///修改酒店信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMediaService.ModifyReply> updateHotelInfoAsync(global::GrpcMediaService.HotelStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_updateHotelInfo, null, options, request);
      }
      /// <summary>
      ///根据HotelId删除酒店信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMediaService.ModifyReply deleteHotelInfoById(global::GrpcMediaService.HotelId request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return deleteHotelInfoById(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据HotelId删除酒店信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMediaService.ModifyReply deleteHotelInfoById(global::GrpcMediaService.HotelId request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_deleteHotelInfoById, null, options, request);
      }
      /// <summary>
      ///根据HotelId删除酒店信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMediaService.ModifyReply> deleteHotelInfoByIdAsync(global::GrpcMediaService.HotelId request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return deleteHotelInfoByIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据HotelId删除酒店信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMediaService.ModifyReply> deleteHotelInfoByIdAsync(global::GrpcMediaService.HotelId request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_deleteHotelInfoById, null, options, request);
      }
      /// <summary>
      ///根据HotelId获得酒店信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMediaService.HotelStruct getHotelById(global::GrpcMediaService.HotelId request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getHotelById(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据HotelId获得酒店信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMediaService.HotelStruct getHotelById(global::GrpcMediaService.HotelId request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_getHotelById, null, options, request);
      }
      /// <summary>
      ///根据HotelId获得酒店信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMediaService.HotelStruct> getHotelByIdAsync(global::GrpcMediaService.HotelId request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getHotelByIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据HotelId获得酒店信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMediaService.HotelStruct> getHotelByIdAsync(global::GrpcMediaService.HotelId request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_getHotelById, null, options, request);
      }
      /// <summary>
      ///获得酒店信息列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMediaService.HotelList GetHotelList(global::GrpcMediaService.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetHotelList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获得酒店信息列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMediaService.HotelList GetHotelList(global::GrpcMediaService.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetHotelList, null, options, request);
      }
      /// <summary>
      ///获得酒店信息列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMediaService.HotelList> GetHotelListAsync(global::GrpcMediaService.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetHotelListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///获得酒店信息列表
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMediaService.HotelList> GetHotelListAsync(global::GrpcMediaService.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetHotelList, null, options, request);
      }
      /// <summary>
      ///================酒店房间类型=========================
      ///创建酒店房间类型
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMediaService.ModifyReply createHotelRoomTypeInfo(global::GrpcMediaService.HotelRoomTypeStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return createHotelRoomTypeInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///================酒店房间类型=========================
      ///创建酒店房间类型
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMediaService.ModifyReply createHotelRoomTypeInfo(global::GrpcMediaService.HotelRoomTypeStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_createHotelRoomTypeInfo, null, options, request);
      }
      /// <summary>
      ///================酒店房间类型=========================
      ///创建酒店房间类型
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMediaService.ModifyReply> createHotelRoomTypeInfoAsync(global::GrpcMediaService.HotelRoomTypeStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return createHotelRoomTypeInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///================酒店房间类型=========================
      ///创建酒店房间类型
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMediaService.ModifyReply> createHotelRoomTypeInfoAsync(global::GrpcMediaService.HotelRoomTypeStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_createHotelRoomTypeInfo, null, options, request);
      }
      /// <summary>
      ///修改酒店房间类型信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMediaService.ModifyReply updateHotelRoomTypeInfo(global::GrpcMediaService.HotelRoomTypeStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return updateHotelRoomTypeInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///修改酒店房间类型信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMediaService.ModifyReply updateHotelRoomTypeInfo(global::GrpcMediaService.HotelRoomTypeStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_updateHotelRoomTypeInfo, null, options, request);
      }
      /// <summary>
      ///修改酒店房间类型信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMediaService.ModifyReply> updateHotelRoomTypeInfoAsync(global::GrpcMediaService.HotelRoomTypeStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return updateHotelRoomTypeInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///修改酒店房间类型信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMediaService.ModifyReply> updateHotelRoomTypeInfoAsync(global::GrpcMediaService.HotelRoomTypeStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_updateHotelRoomTypeInfo, null, options, request);
      }
      /// <summary>
      ///根据HptelRoomTypeId删除酒店房间类型
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMediaService.ModifyReply deleteHotelRoomTypeById(global::GrpcMediaService.HotelRoomTypeId request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return deleteHotelRoomTypeById(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据HptelRoomTypeId删除酒店房间类型
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMediaService.ModifyReply deleteHotelRoomTypeById(global::GrpcMediaService.HotelRoomTypeId request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_deleteHotelRoomTypeById, null, options, request);
      }
      /// <summary>
      ///根据HptelRoomTypeId删除酒店房间类型
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMediaService.ModifyReply> deleteHotelRoomTypeByIdAsync(global::GrpcMediaService.HotelRoomTypeId request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return deleteHotelRoomTypeByIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据HptelRoomTypeId删除酒店房间类型
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMediaService.ModifyReply> deleteHotelRoomTypeByIdAsync(global::GrpcMediaService.HotelRoomTypeId request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_deleteHotelRoomTypeById, null, options, request);
      }
      /// <summary>
      ///根据HotelRoomTypeId获得酒店房间类型信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMediaService.HotelRoomTypeStruct getHotelRoomTypeInfoById(global::GrpcMediaService.HotelRoomTypeId request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getHotelRoomTypeInfoById(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据HotelRoomTypeId获得酒店房间类型信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMediaService.HotelRoomTypeStruct getHotelRoomTypeInfoById(global::GrpcMediaService.HotelRoomTypeId request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_getHotelRoomTypeInfoById, null, options, request);
      }
      /// <summary>
      ///根据HotelRoomTypeId获得酒店房间类型信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMediaService.HotelRoomTypeStruct> getHotelRoomTypeInfoByIdAsync(global::GrpcMediaService.HotelRoomTypeId request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getHotelRoomTypeInfoByIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据HotelRoomTypeId获得酒店房间类型信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMediaService.HotelRoomTypeStruct> getHotelRoomTypeInfoByIdAsync(global::GrpcMediaService.HotelRoomTypeId request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_getHotelRoomTypeInfoById, null, options, request);
      }
      /// <summary>
      ///根据HotelId获得酒店房间集合
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMediaService.HotelRoomTypeList getHolteRoomTypeListByHotelId(global::GrpcMediaService.HotelId request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getHolteRoomTypeListByHotelId(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据HotelId获得酒店房间集合
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMediaService.HotelRoomTypeList getHolteRoomTypeListByHotelId(global::GrpcMediaService.HotelId request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_getHolteRoomTypeListByHotelId, null, options, request);
      }
      /// <summary>
      ///根据HotelId获得酒店房间集合
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMediaService.HotelRoomTypeList> getHolteRoomTypeListByHotelIdAsync(global::GrpcMediaService.HotelId request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getHolteRoomTypeListByHotelIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据HotelId获得酒店房间集合
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMediaService.HotelRoomTypeList> getHolteRoomTypeListByHotelIdAsync(global::GrpcMediaService.HotelId request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_getHolteRoomTypeListByHotelId, null, options, request);
      }
      /// <summary>
      ///创建酒店预订信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMediaService.ModifyReply createHotelBookRecordInfo(global::GrpcMediaService.HotelBookRecordStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return createHotelBookRecordInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///创建酒店预订信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMediaService.ModifyReply createHotelBookRecordInfo(global::GrpcMediaService.HotelBookRecordStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_createHotelBookRecordInfo, null, options, request);
      }
      /// <summary>
      ///创建酒店预订信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMediaService.ModifyReply> createHotelBookRecordInfoAsync(global::GrpcMediaService.HotelBookRecordStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return createHotelBookRecordInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///创建酒店预订信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMediaService.ModifyReply> createHotelBookRecordInfoAsync(global::GrpcMediaService.HotelBookRecordStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_createHotelBookRecordInfo, null, options, request);
      }
      /// <summary>
      ///修改酒店预订信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMediaService.ModifyReply updateHotelBookRecordInfo(global::GrpcMediaService.HotelBookRecordStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return updateHotelBookRecordInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///修改酒店预订信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMediaService.ModifyReply updateHotelBookRecordInfo(global::GrpcMediaService.HotelBookRecordStruct request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_updateHotelBookRecordInfo, null, options, request);
      }
      /// <summary>
      ///修改酒店预订信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMediaService.ModifyReply> updateHotelBookRecordInfoAsync(global::GrpcMediaService.HotelBookRecordStruct request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return updateHotelBookRecordInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///修改酒店预订信息
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMediaService.ModifyReply> updateHotelBookRecordInfoAsync(global::GrpcMediaService.HotelBookRecordStruct request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_updateHotelBookRecordInfo, null, options, request);
      }
      /// <summary>
      ///根据Id删除酒店预订记录
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMediaService.ModifyReply deleteHotelBookRecordInfoById(global::GrpcMediaService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return deleteHotelBookRecordInfoById(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据Id删除酒店预订记录
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMediaService.ModifyReply deleteHotelBookRecordInfoById(global::GrpcMediaService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_deleteHotelBookRecordInfoById, null, options, request);
      }
      /// <summary>
      ///根据Id删除酒店预订记录
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMediaService.ModifyReply> deleteHotelBookRecordInfoByIdAsync(global::GrpcMediaService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return deleteHotelBookRecordInfoByIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据Id删除酒店预订记录
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMediaService.ModifyReply> deleteHotelBookRecordInfoByIdAsync(global::GrpcMediaService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_deleteHotelBookRecordInfoById, null, options, request);
      }
      /// <summary>
      ///根据MemberId获得酒店预订记录
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMediaService.HotelBookRecordList getHotelBookRecordByMemberId(global::GrpcMediaService.MemberId request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getHotelBookRecordByMemberId(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据MemberId获得酒店预订记录
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMediaService.HotelBookRecordList getHotelBookRecordByMemberId(global::GrpcMediaService.MemberId request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_getHotelBookRecordByMemberId, null, options, request);
      }
      /// <summary>
      ///根据MemberId获得酒店预订记录
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMediaService.HotelBookRecordList> getHotelBookRecordByMemberIdAsync(global::GrpcMediaService.MemberId request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getHotelBookRecordByMemberIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据MemberId获得酒店预订记录
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMediaService.HotelBookRecordList> getHotelBookRecordByMemberIdAsync(global::GrpcMediaService.MemberId request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_getHotelBookRecordByMemberId, null, options, request);
      }
      /// <summary>
      ///根据Id取消酒店预订
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMediaService.ModifyReply cancelHotelBookRecordById(global::GrpcMediaService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return cancelHotelBookRecordById(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据Id取消酒店预订
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMediaService.ModifyReply cancelHotelBookRecordById(global::GrpcMediaService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_cancelHotelBookRecordById, null, options, request);
      }
      /// <summary>
      ///根据Id取消酒店预订
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMediaService.ModifyReply> cancelHotelBookRecordByIdAsync(global::GrpcMediaService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return cancelHotelBookRecordByIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据Id取消酒店预订
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMediaService.ModifyReply> cancelHotelBookRecordByIdAsync(global::GrpcMediaService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_cancelHotelBookRecordById, null, options, request);
      }
      /// <summary>
      ///根据Id获得酒店预订记录
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMediaService.HotelBookRecordStruct getHotelBookRecordById(global::GrpcMediaService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getHotelBookRecordById(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据Id获得酒店预订记录
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMediaService.HotelBookRecordStruct getHotelBookRecordById(global::GrpcMediaService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_getHotelBookRecordById, null, options, request);
      }
      /// <summary>
      ///根据Id获得酒店预订记录
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMediaService.HotelBookRecordStruct> getHotelBookRecordByIdAsync(global::GrpcMediaService.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getHotelBookRecordByIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据Id获得酒店预订记录
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMediaService.HotelBookRecordStruct> getHotelBookRecordByIdAsync(global::GrpcMediaService.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_getHotelBookRecordById, null, options, request);
      }
      /// <summary>
      ///根据条件查询酒店预订记录列表(带分页)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMediaService.HotelBookRecordList getHotelBookRecordList(global::GrpcMediaService.PaginationRequestSearch request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getHotelBookRecordList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据条件查询酒店预订记录列表(带分页)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::GrpcMediaService.HotelBookRecordList getHotelBookRecordList(global::GrpcMediaService.PaginationRequestSearch request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_getHotelBookRecordList, null, options, request);
      }
      /// <summary>
      ///根据条件查询酒店预订记录列表(带分页)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMediaService.HotelBookRecordList> getHotelBookRecordListAsync(global::GrpcMediaService.PaginationRequestSearch request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getHotelBookRecordListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///根据条件查询酒店预订记录列表(带分页)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::GrpcMediaService.HotelBookRecordList> getHotelBookRecordListAsync(global::GrpcMediaService.PaginationRequestSearch request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_getHotelBookRecordList, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override MediaServiceToGrpcClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new MediaServiceToGrpcClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(MediaServiceToGrpcBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_createFormPublicInfo, serviceImpl.createFormPublicInfo)
          .AddMethod(__Method_updateFormPublicInfo, serviceImpl.updateFormPublicInfo)
          .AddMethod(__Method_deleteFormPublicInfoById, serviceImpl.deleteFormPublicInfoById)
          .AddMethod(__Method_getFormPublicInfoList, serviceImpl.getFormPublicInfoList)
          .AddMethod(__Method_getFormPublicInfoById, serviceImpl.getFormPublicInfoById)
          .AddMethod(__Method_getFormPublicList, serviceImpl.getFormPublicList)
          .AddMethod(__Method_createExpressInfo, serviceImpl.createExpressInfo)
          .AddMethod(__Method_updateExpressInfo, serviceImpl.updateExpressInfo)
          .AddMethod(__Method_deleteExpressInfoById, serviceImpl.deleteExpressInfoById)
          .AddMethod(__Method_getExpressInfoById, serviceImpl.getExpressInfoById)
          .AddMethod(__Method_getExpressList, serviceImpl.getExpressList)
          .AddMethod(__Method_createCatalogueBooksInfo, serviceImpl.createCatalogueBooksInfo)
          .AddMethod(__Method_updateCatalogueBooksInfo, serviceImpl.updateCatalogueBooksInfo)
          .AddMethod(__Method_deleteCatalogueBooksById, serviceImpl.deleteCatalogueBooksById)
          .AddMethod(__Method_createInterviewInfo, serviceImpl.createInterviewInfo)
          .AddMethod(__Method_updateInterviewInfo, serviceImpl.updateInterviewInfo)
          .AddMethod(__Method_deleteInterviewById, serviceImpl.deleteInterviewById)
          .AddMethod(__Method_getInterviewInfoById, serviceImpl.getInterviewInfoById)
          .AddMethod(__Method_getInterviewList, serviceImpl.getInterviewList)
          .AddMethod(__Method_createHighlightsInfo, serviceImpl.createHighlightsInfo)
          .AddMethod(__Method_updateHighlightsInfo, serviceImpl.updateHighlightsInfo)
          .AddMethod(__Method_deleteHighlightsInfoById, serviceImpl.deleteHighlightsInfoById)
          .AddMethod(__Method_getHighlightsInfoById, serviceImpl.getHighlightsInfoById)
          .AddMethod(__Method_getHighlightsInfoList, serviceImpl.getHighlightsInfoList)
          .AddMethod(__Method_createHotelInfo, serviceImpl.createHotelInfo)
          .AddMethod(__Method_updateHotelInfo, serviceImpl.updateHotelInfo)
          .AddMethod(__Method_deleteHotelInfoById, serviceImpl.deleteHotelInfoById)
          .AddMethod(__Method_getHotelById, serviceImpl.getHotelById)
          .AddMethod(__Method_GetHotelList, serviceImpl.GetHotelList)
          .AddMethod(__Method_createHotelRoomTypeInfo, serviceImpl.createHotelRoomTypeInfo)
          .AddMethod(__Method_updateHotelRoomTypeInfo, serviceImpl.updateHotelRoomTypeInfo)
          .AddMethod(__Method_deleteHotelRoomTypeById, serviceImpl.deleteHotelRoomTypeById)
          .AddMethod(__Method_getHotelRoomTypeInfoById, serviceImpl.getHotelRoomTypeInfoById)
          .AddMethod(__Method_getHolteRoomTypeListByHotelId, serviceImpl.getHolteRoomTypeListByHotelId)
          .AddMethod(__Method_createHotelBookRecordInfo, serviceImpl.createHotelBookRecordInfo)
          .AddMethod(__Method_updateHotelBookRecordInfo, serviceImpl.updateHotelBookRecordInfo)
          .AddMethod(__Method_deleteHotelBookRecordInfoById, serviceImpl.deleteHotelBookRecordInfoById)
          .AddMethod(__Method_getHotelBookRecordByMemberId, serviceImpl.getHotelBookRecordByMemberId)
          .AddMethod(__Method_cancelHotelBookRecordById, serviceImpl.cancelHotelBookRecordById)
          .AddMethod(__Method_getHotelBookRecordById, serviceImpl.getHotelBookRecordById)
          .AddMethod(__Method_getHotelBookRecordList, serviceImpl.getHotelBookRecordList).Build();
    }

  }
}
#endregion
